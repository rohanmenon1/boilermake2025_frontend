/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
import * as t from "react";
import { IconWrap as x } from "@progress/kendo-react-common";
import { arrowLeftIcon as v, arrowRightIcon as k } from "@progress/kendo-svg-icons";
import { useInternationalization as I, useLocalization as b } from "@progress/kendo-react-intl";
import { tooltipUnitFormat as u, messages as w } from "./messages.mjs";
const R = (e) => {
  const {
    Content: l,
    dir: o,
    offset: r,
    event: { tooltipData: n, dataItem: E, nodeValue: y }
  } = e, p = t.useRef(null);
  return t.useEffect(() => {
    const i = p.current;
    if (!n || !i)
      return;
    const f = { width: i.offsetWidth, height: i.offsetHeight }, a = { ...n.popupOffset }, s = n.popupAlign;
    a.left += s.horizontal === "left" ? r : -1 * r, s.horizontal === "right" && (a.left -= f.width), s.vertical === "bottom" ? a.top -= f.height + r : a.top += r, i.style.left = `${a.left}px`, i.style.top = `${a.top}px`, i.style.visibility = "";
  }, [n]), /* @__PURE__ */ t.createElement(
    "div",
    {
      ref: p,
      style: { visibility: "hidden" },
      dir: o,
      className: "k-tooltip k-sankey-tooltip k-chart-tooltip k-chart-shared-tooltip"
    },
    /* @__PURE__ */ t.createElement("div", { className: "k-tooltip-content" }, /* @__PURE__ */ t.createElement(l, { dir: o, dataItem: E, nodeValue: y }))
  );
}, d = 3, z = `0 ${d}px`, h = { display: "flex", alignItems: "center" }, m = (e) => /* @__PURE__ */ t.createElement(
  "div",
  {
    style: {
      width: 15,
      height: 15,
      backgroundColor: e.color,
      display: "inline-flex",
      marginLeft: d
    }
  }
), c = (e) => /* @__PURE__ */ t.createElement("span", { style: { margin: z } }, e.children), g = (e) => I().format(
  b().toLanguageString(u, w[u]),
  [e || 0]
), S = (e) => {
  const { color: l, label: o } = e.dataItem;
  return /* @__PURE__ */ t.createElement("div", { style: h, className: "k-tooltip-content" }, /* @__PURE__ */ t.createElement(m, { color: l }), /* @__PURE__ */ t.createElement(c, null, o.text), /* @__PURE__ */ t.createElement(c, null, g(e.nodeValue)));
}, $ = (e) => {
  const { source: l, target: o, value: r } = e.dataItem, n = e.dir === "rtl" ? v : k;
  return /* @__PURE__ */ t.createElement("div", { style: h }, /* @__PURE__ */ t.createElement(m, { color: l.color }), /* @__PURE__ */ t.createElement(c, null, l.label.text), /* @__PURE__ */ t.createElement(x, { icon: n, name: n.name }), /* @__PURE__ */ t.createElement(m, { color: o.color }), /* @__PURE__ */ t.createElement(c, null, o.label.text), /* @__PURE__ */ t.createElement(c, null, g(r)));
};
export {
  $ as LinkTooltipContent,
  S as NodeTooltipContent,
  R as TooltipComponent
};
