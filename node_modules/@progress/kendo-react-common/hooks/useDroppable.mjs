/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as t from "react";
import { noop as o } from "../noop.mjs";
import { useInheritedState as k } from "./useInheritedState.mjs";
import { DropsContext as v, DropContext as E } from "../drag-n-drop/context/index.mjs";
import { useIsomorphicLayoutEffect as L } from "./use-isomorphic-layout-effect.mjs";
function y(e, m = {
  onDragEnter: o,
  onDragOver: o,
  onDragLeave: o,
  onDrop: o
}) {
  const { onDragEnter: s = o, onDragOver: c = o, onDragLeave: l = o, onDrop: u = o } = m, [, n] = k(E), [, D, g] = t.useContext(v), i = t.useCallback(
    () => e.current && e.current.element ? e.current.element : e.current,
    [e]
  ), a = t.useRef(null);
  t.useImperativeHandle(a, () => ({
    element: i(),
    onDragEnter: C,
    onDragOver: d,
    onDragLeave: b,
    onDrop: h,
    data: e.current
  }));
  const C = t.useCallback(
    (r) => {
      n(a, { target: e.current, event: r }), s(r);
    },
    [n, e, s]
  ), d = t.useCallback(
    (r) => {
      c(r);
    },
    [c]
  ), b = t.useCallback(
    (r) => {
      n(null, { target: e.current, event: r }), l(r);
    },
    [n, e, l]
  ), h = t.useCallback(
    (r) => {
      n(null, { target: e.current, event: r }), u(r);
    },
    [n, e, u]
  ), p = t.useCallback(() => (D(a), () => {
    g(a);
  }), [g, D]);
  L(p, [p]);
}
export {
  y as useDroppable
};
