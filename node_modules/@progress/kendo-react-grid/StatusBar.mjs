/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
import * as i from "react";
import { getter as m } from "@progress/kendo-react-common";
const x = (a) => {
  const { data: n = [] } = a;
  return /* @__PURE__ */ i.createElement("div", { className: "k-selection-aggregates k-grid-selection-aggregates" }, n.map((r, o) => /* @__PURE__ */ i.createElement("div", { key: o }, /* @__PURE__ */ i.createElement("span", { className: "k-selection-aggregates-item-text" }, r.type, ": "), /* @__PURE__ */ i.createElement("span", { className: "k-selection-aggregates-item-value" }, r.formattedValue))));
};
x.displayName = "KendoReactGridStatusBar";
const D = (a) => {
  var r;
  const n = a.slice();
  for (let o = 0; o < n.length; o++)
    for (; n[o] && ((r = n[o].children) != null && r.length); )
      n.splice(o, 1, ...n[o].children);
  return n;
}, v = (a) => {
  const { dataItems: n, target: r } = a, p = D(r.columns).map((e) => e.field).filter((e) => e && typeof e == "string").map(
    (e) => m(e)
  ), b = "selectedField" in a ? m(a.selectedField) : (e) => a.select[m(a.dataItemKey)(e)], t = { dates: [], numbers: [], booleans: [], others: [] }, y = (e) => {
    typeof e == "number" ? t.numbers.push(e) : typeof e == "boolean" ? t.booleans.push(e) : e instanceof Date ? t.dates.push(e) : t.others.push(e);
  };
  n.forEach((e) => {
    const s = b(e);
    s && s.forEach((l) => {
      y(p[l](e));
    });
  });
  const d = t.dates.map((e) => e.getTime()), g = t.booleans.filter((e) => e).length, u = t.booleans.filter((e) => !e).length, c = t.numbers.length ? t.numbers.reduce((e, s) => e += s, 0) : void 0, h = {
    sum: c,
    average: typeof c == "number" ? c / t.numbers.length : void 0,
    min: t.numbers.length ? Math.min(...t.numbers) : void 0,
    max: t.numbers.length ? Math.max(...t.numbers) : void 0,
    count: t.numbers.length + t.booleans.length + t.dates.length + t.others.length,
    isTrue: g > 0 ? g : void 0,
    isFalse: u > 0 ? u : void 0,
    earliest: t.dates.length ? new Date(Math.min(...d)) : void 0,
    latest: t.dates.length ? new Date(Math.max(...d)) : void 0
  }, E = (e, s) => (s === "sum" || s === "average") && typeof e == "number" ? e.toFixed(2) : (s === "earliest" || s === "latest") && e instanceof Date ? e.toLocaleDateString() : String(e), f = [];
  return Object.keys(h).forEach((e) => {
    const s = e, l = h[s];
    l !== void 0 && f.push({ type: s, value: l, formattedValue: E(l, s) });
  }), f;
};
export {
  x as StatusBar,
  v as getStatusData,
  D as leafColumns
};
