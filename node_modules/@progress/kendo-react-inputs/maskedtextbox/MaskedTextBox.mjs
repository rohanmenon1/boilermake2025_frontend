/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
import * as p from "react";
import e from "prop-types";
import { MaskingService as E } from "./masking.service.mjs";
import { defaultRules as y, maskingChanged as O, returnFalse as b } from "./utils.mjs";
import { validatePackage as V, useCustomComponent as P, classNames as _, uMaskedTextBox as C, getTabIndex as w, createPropsContext as I, withIdHOC as M, withPropsContext as D, withUnstyledHOC as H } from "@progress/kendo-react-common";
import { FloatingLabel as q } from "@progress/kendo-react-labels";
import { packageMetadata as B } from "../package-metadata.mjs";
const l = class l extends p.Component {
  constructor(i) {
    super(i), this.state = {}, this._inputId = `k_${this.props.id}`, this._service = new E(), this._isPasted = !1, this._selection = [null, null], this._input = null, this.focus = () => {
      this._input && this._input.focus();
    }, this.pasteHandler = (t) => {
      const { selectionStart: r, selectionEnd: s } = t.target;
      s !== r && (this._isPasted = !0, this._selection = [r || 0, s || 0]);
    }, this.onChangeHandler = (t) => {
      const r = t.currentTarget, s = r.value, o = this._selection[0] || 0, a = this._selection[1] || 0;
      if (!this.props.mask) {
        this._isPasted = !1, this._selection = [null, null], this.triggerOnChange(s, t);
        return;
      }
      const d = this.value;
      let n;
      if (this._isPasted) {
        this._isPasted = !1;
        const h = d.length - a, u = s.length - h;
        n = this._service.maskInRange(s.slice(o, u), d, o, a);
      } else
        n = this._service.maskInput(s, d, r.selectionStart || 0);
      this._selection = [n.selection, n.selection], this.triggerOnChange(n.value, t);
    }, this.focusHandler = (t) => {
      this.state.focused || (this.setState({ focused: !0 }), this.props.onFocus && this.props.onFocus.call(void 0, {
        target: this,
        syntheticEvent: t,
        nativeEvent: t.nativeEvent
      }));
    }, this.blurHandler = (t) => {
      this.state.focused && (this.setState({ focused: !1 }), this.props.onBlur && this.props.onBlur.call(void 0, {
        target: this,
        syntheticEvent: t,
        nativeEvent: t.nativeEvent
      }));
    }, this.setValidity = () => {
      this.element && this.element.setCustomValidity(this.validity.valid ? "" : this.props.validationMessage || "");
    }, V(B);
  }
  /**
   * Gets the element of the MaskedTextBox.
   *
   * @return - An `HTMLInputElement`.
   *
   * @example
   * ```jsx
   * class App extends React.Component {
   *     constructor(props) {
   *         super(props);
   *     }
   *     element = null;
   *     render() {
   *         return (
   *             <div>
   *                 <MaskedTextBox
   *                     ref={(component) =>
   *                         this.element = component ? component.element : null}
   *                 />
   *                 <button onClick={() => console.log(this.element)}>console.log the element</button>
   *             </div>
   *         );
   *     }
   * }
   *
   * ReactDOM.render(
   *     <App />,
   *     document.getElementsByTagName('my-app')[0]
   * );
   * ```
   */
  get element() {
    return this._input;
  }
  /**
   * Gets the value with the mask of the MaskedTextBox.
   */
  get value() {
    return this._valueDuringOnChange !== void 0 ? this._valueDuringOnChange : this.props.value !== void 0 ? this.props.value : this.state.value !== void 0 ? this.state.value : this.props.defaultValue !== void 0 ? this.props.defaultValue : "";
  }
  /**
   * Gets the raw value without the mask of the MaskedTextBox.
   */
  get rawValue() {
    return this._service.rawValue(this.value);
  }
  /**
   * Represents the validity state into which the MaskedTextBox is set.
   */
  get validity() {
    const i = this.value, t = this._service.validationValue(i), r = this.props.validationMessage !== void 0, s = this.props.valid !== void 0 ? this.props.valid : (!this.required || !!t) && (!this.props.maskValidation || !this.props.prompt || i.indexOf(this.props.prompt) === -1);
    return {
      customError: r,
      valid: s,
      valueMissing: !t
    };
  }
  /**
   * @hidden
   */
  get validityStyles() {
    return this.props.validityStyles !== void 0 ? this.props.validityStyles : l.defaultProps.validityStyles;
  }
  /**
   * @hidden
   */
  get required() {
    return this.props.required !== void 0 ? this.props.required : !1;
  }
  /**
   * Gets the `name` property of the MaskedTextBox.
   */
  get name() {
    return this.props.name;
  }
  /**
   * @hidden
   */
  componentDidUpdate(i, t) {
    if (this.element && this.state.focused && t.focused) {
      let [r, s] = this._selection;
      const o = i.selection, a = this.props.selection;
      (!o && a || o && a && (o.start !== a.start || o.end !== a.end)) && (r = a.start, s = a.end), r !== null && s !== null && this.element.setSelectionRange(r, s);
    }
    O(i, this.props) && this.updateService(), this.setValidity();
  }
  /**
   * @hidden
   */
  componentDidMount() {
    this.updateService(), this.setValidity();
  }
  /**
   * @hidden
   */
  render() {
    const {
      size: i = l.defaultProps.size,
      fillMode: t = l.defaultProps.fillMode,
      rounded: r = l.defaultProps.rounded,
      autoFocus: s = l.defaultProps.autoFocus,
      prefix: o = l.defaultProps.prefix,
      suffix: a = l.defaultProps.suffix,
      inputAttributes: d,
      unstyled: n,
      className: h
    } = this.props, u = this.props.id || this._inputId, f = !this.validityStyles || this.validity.valid, v = this.props.style || {}, m = n && n.uMaskedTextBox, [x] = P(o), [S] = P(a), g = /* @__PURE__ */ p.createElement(
      "span",
      {
        dir: this.props.dir,
        className: _(
          C.wrapper({
            c: m,
            invalid: !f,
            disabled: this.props.disabled,
            size: i,
            fillMode: t,
            rounded: r
          }),
          h
        ),
        style: this.props.label ? v : { width: this.props.width, ...v }
      },
      /* @__PURE__ */ p.createElement(x, null),
      /* @__PURE__ */ p.createElement(
        "input",
        {
          type: "text",
          autoComplete: "off",
          autoCorrect: "off",
          autoCapitalize: "off",
          autoFocus: s,
          spellCheck: !1,
          className: _(C.inputInner({ c: m })),
          value: this.value,
          id: u,
          "aria-labelledby": this.props.ariaLabelledBy,
          "aria-describedby": this.props.ariaDescribedBy,
          "aria-placeholder": this.props.mask,
          "aria-required": this.props.required,
          name: this.props.name,
          tabIndex: w(this.props.tabIndex, this.props.disabled, !0),
          accessKey: this.props.accessKey,
          title: this.props.title,
          disabled: this.props.disabled || void 0,
          readOnly: this.props.readonly || void 0,
          placeholder: this.props.placeholder,
          ref: (k) => this._input = k,
          onChange: this.onChangeHandler,
          onPaste: this.pasteHandler,
          onFocus: this.focusHandler,
          onBlur: this.blurHandler,
          onDragStart: b,
          onDrop: b,
          ...d
        }
      ),
      /* @__PURE__ */ p.createElement(S, null)
    );
    return this.props.label ? /* @__PURE__ */ p.createElement(
      q,
      {
        label: this.props.label,
        editorId: u,
        editorValue: this.value,
        editorValid: f,
        editorDisabled: this.props.disabled,
        editorPlaceholder: this.props.placeholder,
        children: g,
        style: { width: this.props.width },
        dir: this.props.dir
      }
    ) : g;
  }
  triggerOnChange(i, t) {
    if (this.setState({
      value: i
    }), this.props.onChange) {
      this._valueDuringOnChange = i;
      const r = {
        syntheticEvent: t,
        nativeEvent: t.nativeEvent,
        selectionStart: this._selection[0],
        selectionEnd: this._selection[1],
        target: this,
        value: this.value
      };
      this.props.onChange.call(void 0, r), this._valueDuringOnChange = void 0;
    }
  }
  updateService(i) {
    const t = Object.assign(
      {
        includeLiterals: this.props.includeLiterals,
        mask: this.props.mask,
        prompt: this.props.prompt,
        promptPlaceholder: this.props.promptPlaceholder,
        rules: this.rules
      },
      i
    );
    this._service.update(t);
  }
  get rules() {
    return Object.assign({}, y, this.props.rules);
  }
};
l.displayName = "MaskedTextBox", l.propTypes = {
  value: e.string,
  defaultValue: e.string,
  placeholder: e.string,
  title: e.string,
  dir: e.string,
  id: e.string,
  style: e.object,
  className: e.string,
  prefix: e.any,
  suffix: e.any,
  ariaLabelledBy: e.string,
  ariaDescribedBy: e.string,
  width: e.oneOfType([e.string, e.number]),
  tabIndex: e.number,
  accessKey: e.string,
  disabled: e.bool,
  readonly: e.bool,
  prompt: e.string,
  promptPlaceholder: e.string,
  includeLiterals: e.bool,
  maskValidation: e.bool,
  mask: e.string,
  rules: function(i, t, r) {
    const s = i.rules;
    return s !== void 0 && !Object.entries(s).some((a) => typeof a != "string" || !(s[a] instanceof RegExp)) ? new Error(
      "Invalid prop `" + t + "` supplied to `" + r + "`. Validation failed."
    ) : null;
  },
  selection: e.shape({
    start: e.number.isRequired,
    end: e.number.isRequired
  }),
  name: e.string,
  label: e.string,
  validationMessage: e.string,
  required: e.bool,
  valid: e.bool,
  validityStyles: e.bool,
  onChange: e.func,
  size: e.oneOf([null, "small", "medium", "large"]),
  rounded: e.oneOf([null, "small", "medium", "large", "full"]),
  fillMode: e.oneOf([null, "solid", "flat", "outline"]),
  autoFocus: e.bool,
  inputAttributes: e.object
}, l.defaultProps = {
  prompt: "_",
  promptPlaceholder: " ",
  includeLiterals: !1,
  maskValidation: !0,
  rules: y,
  validityStyles: !0,
  prefix: (i) => null,
  suffix: (i) => null,
  size: "medium",
  rounded: "medium",
  fillMode: "solid",
  autoFocus: !1
};
let c = l;
const F = I(), R = M(
  D(
    F,
    H(c)
  )
);
R.displayName = "KendoReactMaskedTextBox";
export {
  R as MaskedTextBox,
  F as MaskedTextBoxPropsContext,
  c as MaskedTextBoxWithoutContext
};
