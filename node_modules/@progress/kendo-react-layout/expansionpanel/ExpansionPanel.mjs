/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
import * as e from "react";
import a from "prop-types";
import { validatePackage as w, dispatchEvent as p, Keys as x, useAsyncFocusBlur as F, classNames as v, useRtl as S, getTabIndex as D, IconWrap as K } from "@progress/kendo-react-common";
import { packageMetadata as P } from "../package-metadata.mjs";
import { chevronDownIcon as A, chevronUpIcon as T } from "@progress/kendo-svg-icons";
const I = e.forwardRef((n, y) => {
  w(P);
  const i = e.useRef(null), [g, u] = e.useState(!1), r = e.useCallback(() => ({ element: i.current }), []);
  e.useImperativeHandle(y, r);
  const {
    expanded: o = !1,
    disabled: t,
    title: m,
    subtitle: b,
    onAction: s,
    expandIcon: d,
    collapseIcon: c,
    expandSVGIcon: f,
    collapseSVGIcon: k
  } = n, N = e.useCallback(
    (l) => {
      p(s, l, r(), {
        expanded: o
      });
    },
    [s, o]
  ), h = e.useCallback(
    (l) => {
      (l.keyCode === x.enter || l.keyCode === x.space) && (l.preventDefault(), p(s, l, r(), {
        expanded: o
      }));
    },
    [s, o]
  ), C = e.useCallback(() => {
    n.disabled || u(!0);
  }, [n.disabled]), E = e.useCallback(() => {
    n.disabled || u(!1);
  }, [n.disabled]), { onFocus: B, onBlur: R } = F({ onFocus: C, onBlur: E });
  return /* @__PURE__ */ e.createElement(
    "div",
    {
      ref: i,
      className: v("k-expander", n.className, {
        "k-expanded": o,
        "k-focus": g && !t,
        "k-disabled": t
      }),
      onFocus: B,
      onBlur: R,
      style: n.style,
      id: n.id,
      dir: S(i, n.dir),
      onKeyDown: t ? void 0 : h
    },
    /* @__PURE__ */ e.createElement(
      "div",
      {
        role: "button",
        "aria-controls": n.ariaControls,
        "aria-expanded": o,
        "aria-disabled": t,
        tabIndex: D(n.tabIndex, t),
        className: "k-expander-header",
        onClick: t ? void 0 : N
      },
      m !== void 0 ? /* @__PURE__ */ e.createElement("div", { className: "k-expander-title" }, m) : void 0,
      /* @__PURE__ */ e.createElement("span", { className: "k-spacer" }),
      b !== void 0 ? /* @__PURE__ */ e.createElement("div", { className: "k-expander-sub-title" }, b) : void 0,
      /* @__PURE__ */ e.createElement("span", { className: "k-expander-indicator" }, /* @__PURE__ */ e.createElement(
        K,
        {
          name: o ? c ? void 0 : "chevron-up" : d ? void 0 : "chevron-down",
          icon: o ? !k && !c ? T : k : !f && !d ? A : f,
          className: v(
            o ? {
              [String(c)]: !!c
            } : {
              [String(d)]: !!d
            }
          )
        }
      ))
    ),
    n.children
  );
});
I.propTypes = {
  children: a.node,
  className: a.string,
  style: a.object,
  dir: a.string,
  id: a.string,
  tabIndex: a.number,
  title: a.node,
  subtitle: a.node,
  expandIcon: a.string,
  collapseIcon: a.string,
  expanded: a.bool,
  disabled: a.bool,
  onAction: a.func
};
I.displayName = "KendoReactExpansionPanel";
export {
  I as ExpansionPanel
};
