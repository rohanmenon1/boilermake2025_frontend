/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
import * as t from "react";
import n from "prop-types";
import { validatePackage as Y, useDir as Z, classNames as _, kendoThemeMaps as ee, Keys as u } from "@progress/kendo-react-common";
import { toolbarButtons as te } from "../util.mjs";
import { packageMetadata as oe } from "../package-metadata.mjs";
import { ToolbarScrollable as re } from "./tools/ToolbarScrollable.mjs";
import { ToolbarOverflowSection as ne } from "./tools/ToolbarOverflowSection.mjs";
const N = t.forwardRef((i, A) => {
  Y(oe);
  const {
    children: k,
    className: K,
    id: j,
    ariaLabel: q,
    keyboardNavigation: p,
    role: x,
    onResize: E,
    style: D,
    tabIndex: B = f.tabIndex,
    size: b = f.size,
    fillMode: w = f.fillMode,
    overflow: c,
    scrollButtons: d = f.scrollButtons,
    scrollButtonsPosition: $ = f.scrollButtonsPosition,
    buttonScrollSpeed: F = f.buttonScrollSpeed,
    prevButton: G,
    nextButton: J
  } = i, C = t.useRef(!1), r = t.useRef(null), m = t.useRef(null), h = t.useRef(0), S = t.useRef(0), s = t.useRef([]), I = t.useRef({ element: null, props: i }), [Q, U] = t.useState(!1), [O, P] = t.useState(!0), [W, z] = t.useState(!1), g = Z(r, i.dir), y = t.useMemo(() => i.buttons || te, [i.buttons]), V = t.useMemo(() => y.map((e) => e + ":focus").join(","), [y]), M = () => {
    const e = r.current && r.current.querySelector(V);
    return Math.max(
      0,
      s.current.findIndex((l) => l === e)
    );
  };
  t.useImperativeHandle(
    I,
    () => ({
      element: r.current,
      props: i
    })
  ), t.useImperativeHandle(A, () => I.current), t.useEffect(() => (window.addEventListener("resize", L), r.current && (S.current = r.current.offsetWidth, h.current = r.current.offsetHeight, p !== !1 && (s.current = Array.from(
    r.current.querySelectorAll(y.join(","))
  ), H(0))), () => {
    window.removeEventListener("resize", L), s.current.length = 0;
  }), []), t.useEffect(() => {
    if (C.current) {
      if (!r.current || p === !1)
        return;
      s.current = Array.from(
        r.current.querySelectorAll(y.join(","))
      ), H(M()), T();
    } else
      C.current = !0;
  });
  const H = (e) => {
    s.current.forEach((l, o) => {
      l.tabIndex = o === e ? B : -1;
    });
  }, X = (e) => {
    const l = e.keyCode === u.left || e.keyCode === u.right || e.keyCode === u.home || e.keyCode === u.end, o = M();
    !l || e.defaultPrevented || s.current.findIndex((a) => a === e.target) === -1 || (e.keyCode === u.left ? v(
      o,
      o === 0 ? s.current.length - 1 : o - 1
    ) : v(
      o,
      o === s.current.length - 1 ? 0 : o + 1
    ), e.keyCode === u.home && v(o, 0), e.keyCode === u.end && v(o, s.current.length - 1));
  }, v = (e, l) => {
    const o = s.current[l];
    if (o) {
      o.tabIndex = B, o.focus();
      const a = s.current[e];
      a && (a.tabIndex = -1);
    }
  }, L = (e) => {
    if (!r.current)
      return;
    const l = r.current.offsetWidth, o = r.current.offsetHeight;
    if (S.current !== l || h.current !== o) {
      S.current = l, h.current = o;
      const a = { offsetWidth: S.current, offsetHeight: h.current };
      E && E.call(void 0, { target: I.current, ...a, nativeEvent: e });
    }
    T();
  }, T = t.useCallback(() => {
    const e = m.current;
    e && U(
      e.scrollWidth > e.clientWidth || e.scrollHeight > e.clientHeight
    );
  }, []), R = t.useCallback(() => {
    const e = m.current;
    if (e) {
      const l = e.scrollLeft === 0, o = g !== "rtl" ? e.scrollLeft + e.clientWidth === e.scrollWidth : e.clientWidth - e.scrollLeft === e.scrollWidth;
      l && P(!0), o && z(!0), !l && !o && (P(!1), z(!1));
    }
  }, [g]);
  return t.useEffect(() => {
    const e = m.current;
    if (e)
      return e.addEventListener("scroll", R), () => {
        e.removeEventListener("scroll", R);
      };
  }, [R]), /* @__PURE__ */ t.createElement(
    "div",
    {
      id: j,
      "aria-label": q,
      className: _(
        "k-toolbar",
        {
          [`k-toolbar-${ee.sizeMap[b] || b}`]: b,
          [`k-toolbar-${w}`]: w,
          "k-toolbar-scrollable": c === "scroll",
          "k-toolbar-scrollable-overlay": c === "scroll" && (d === "hidden" || d === void 0),
          "k-toolbar-scrollable-start": c === "scroll" && d === "hidden" && O,
          "k-toolbar-scrollable-end": c === "scroll" && d === "hidden" && W,
          "k-toolbar-section": i.overflow && c === "section"
        },
        K
      ),
      style: D,
      role: x !== void 0 ? x || void 0 : "toolbar",
      dir: g,
      ref: r,
      onKeyDown: p !== !1 ? X : void 0
    },
    c === "scroll" && /* @__PURE__ */ t.createElement(
      re,
      {
        scrollButtons: d,
        scrollButtonsPosition: $,
        prevButton: G,
        nextButton: J,
        isOverflowing: Q,
        scrollContentRef: m,
        buttonScrollSpeed: F,
        dir: g,
        isScrollStartPosition: O,
        isScrollEndPosition: W,
        children: k
      }
    ),
    c === "section" && /* @__PURE__ */ t.createElement(ne, { toolbarRef: r, fillMode: w, size: b }, k),
    (c === "none" || c === void 0) && k
  );
}), f = {
  tabIndex: 0,
  size: "medium",
  fillMode: "solid",
  scrollButtons: "auto",
  scrollButtonsPosition: "split",
  buttonScrollSpeed: 100
};
N.displayName = "KendoReactToolbar";
N.propTypes = {
  tabIndex: n.number,
  dir: n.string,
  keyboardNavigation: n.bool,
  style: n.object,
  className: n.string,
  role: n.string,
  onResize: n.func,
  buttons: n.arrayOf(n.string.isRequired),
  size: n.oneOf([null, "small", "medium", "large"]),
  fillMode: n.oneOf([null, "solid", "flat", "outline"]),
  overflow: n.oneOf(["none", "section", "scroll"]),
  scrollButtons: n.oneOf(["hidden", "visible", "auto"]),
  scrollButtonsPosition: n.oneOf(["start", "end", "split"]),
  buttonScrollSpeed: n.number
};
export {
  N as Toolbar
};
